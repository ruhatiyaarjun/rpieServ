HTTP Protocol

We would follow the implementation of this using Microhttpd library implementation which is an already laid down open source implementation for the http protocol. Also a plugin system is a must for these kinds of software. In order to implement the JS virtualization with our application we use duktape which is a JS library. 

The flow for the lifetime of the application would be as follows:

1> The server would receive a request from the client. The microhttpd library runs as a daemon on the server and the request is then parsed by its internal engine which comes out to us by its internal API. Its internal API provides us with a callback function method. This callback function method is responsible for handling all the HTTP request from the client all in separate threads.

2> This step consists of the JS plugin implementation. For each thread or request a JS context will be created which would then be responsible for proper handling of the http request that originated from the client.

3> The response text from the JS engine acts as the output to the browser and therefore would be passed on back to the buffer stream output of the microhttpd library which has the responsibility of sending it back to the client.


FTP protocol

Being in python this is very simple to implement and contains of very small part of codes being written. The following steps are as the program will react to

1> Add all users along with permissions to where there accessible to .

2> Add directory for anonymous logins.

3> Start the FTP server.


TELNET

Telnet was used to access terminal on remote machine before SSH.In this project we will be making a small telnet server based on RUBY language from scratch.

Basic modules of Telnet are as follows:

1> Socket server which is responsible for listening to all the connection requests to the server and sending back the response.

2> Processing engine which is responsible for interpreting and running the commands that are sent by the end user.


